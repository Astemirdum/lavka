// Code generated by "enumer -type=CourierType -yaml -json -transform=snake -text -trimprefix=CourierType"; DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _CourierTypeName = "unknownfootbicyclecar"

var _CourierTypeIndex = [...]uint8{0, 7, 11, 18, 21}

const _CourierTypeLowerName = "unknownfootbicyclecar"

func (i CourierType) String() string {
	if i < 0 || i >= CourierType(len(_CourierTypeIndex)-1) {
		return fmt.Sprintf("CourierType(%d)", i)
	}
	return _CourierTypeName[_CourierTypeIndex[i]:_CourierTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CourierTypeNoOp() {
	var x [1]struct{}
	_ = x[CourierTypeUnknown-(0)]
	_ = x[CourierTypeFoot-(1)]
	_ = x[CourierTypeBicycle-(2)]
	_ = x[CourierTypeCar-(3)]
}

var _CourierTypeValues = []CourierType{CourierTypeUnknown, CourierTypeFoot, CourierTypeBicycle, CourierTypeCar}

var _CourierTypeNameToValueMap = map[string]CourierType{
	_CourierTypeName[0:7]:        CourierTypeUnknown,
	_CourierTypeLowerName[0:7]:   CourierTypeUnknown,
	_CourierTypeName[7:11]:       CourierTypeFoot,
	_CourierTypeLowerName[7:11]:  CourierTypeFoot,
	_CourierTypeName[11:18]:      CourierTypeBicycle,
	_CourierTypeLowerName[11:18]: CourierTypeBicycle,
	_CourierTypeName[18:21]:      CourierTypeCar,
	_CourierTypeLowerName[18:21]: CourierTypeCar,
}

var _CourierTypeNames = []string{
	_CourierTypeName[0:7],
	_CourierTypeName[7:11],
	_CourierTypeName[11:18],
	_CourierTypeName[18:21],
}

// CourierTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CourierTypeString(s string) (CourierType, error) {
	if val, ok := _CourierTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CourierTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CourierType values", s)
}

// CourierTypeValues returns all values of the enum
func CourierTypeValues() []CourierType {
	return _CourierTypeValues
}

// CourierTypeStrings returns a slice of all String values of the enum
func CourierTypeStrings() []string {
	strs := make([]string, len(_CourierTypeNames))
	copy(strs, _CourierTypeNames)
	return strs
}

// IsACourierType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CourierType) IsACourierType() bool {
	for _, v := range _CourierTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for CourierType
func (i CourierType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for CourierType
func (i *CourierType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CourierType should be a string, got %s", data)
	}

	var err error
	*i, err = CourierTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for CourierType
func (i CourierType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for CourierType
func (i *CourierType) UnmarshalText(text []byte) error {
	var err error
	*i, err = CourierTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for CourierType
func (i CourierType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CourierType
func (i *CourierType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CourierTypeString(s)
	return err
}
