// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/Astemirdum/lavka/internal/model"
	models "github.com/Astemirdum/lavka/models/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AssignOrders mocks base method.
func (m *MockService) AssignOrders(ctx context.Context, date time.Time) ([]model.AssignCouriers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignOrders", ctx, date)
	ret0, _ := ret[0].([]model.AssignCouriers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignOrders indicates an expected call of AssignOrders.
func (mr *MockServiceMockRecorder) AssignOrders(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignOrders", reflect.TypeOf((*MockService)(nil).AssignOrders), ctx, date)
}

// CompleteOrders mocks base method.
func (m *MockService) CompleteOrders(ctx context.Context, params []model.CompleteInfo) (models.OrderSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOrders", ctx, params)
	ret0, _ := ret[0].(models.OrderSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteOrders indicates an expected call of CompleteOrders.
func (mr *MockServiceMockRecorder) CompleteOrders(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOrders", reflect.TypeOf((*MockService)(nil).CompleteOrders), ctx, params)
}

// CouriersAssignment mocks base method.
func (m *MockService) CouriersAssignment(ctx context.Context, id int, date time.Time) ([]model.AssignCouriers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CouriersAssignment", ctx, id, date)
	ret0, _ := ret[0].([]model.AssignCouriers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CouriersAssignment indicates an expected call of CouriersAssignment.
func (mr *MockServiceMockRecorder) CouriersAssignment(ctx, id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CouriersAssignment", reflect.TypeOf((*MockService)(nil).CouriersAssignment), ctx, id, date)
}

// CreateCouriers mocks base method.
func (m *MockService) CreateCouriers(ctx context.Context, couriers models.CourierSlice) (models.CourierSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCouriers", ctx, couriers)
	ret0, _ := ret[0].(models.CourierSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCouriers indicates an expected call of CreateCouriers.
func (mr *MockServiceMockRecorder) CreateCouriers(ctx, couriers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCouriers", reflect.TypeOf((*MockService)(nil).CreateCouriers), ctx, couriers)
}

// CreateOrders mocks base method.
func (m *MockService) CreateOrders(ctx context.Context, ords models.OrderSlice) (models.OrderSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrders", ctx, ords)
	ret0, _ := ret[0].(models.OrderSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrders indicates an expected call of CreateOrders.
func (mr *MockServiceMockRecorder) CreateOrders(ctx, ords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrders", reflect.TypeOf((*MockService)(nil).CreateOrders), ctx, ords)
}

// GetCourier mocks base method.
func (m *MockService) GetCourier(ctx context.Context, id int) (*models.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourier", ctx, id)
	ret0, _ := ret[0].(*models.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourier indicates an expected call of GetCourier.
func (mr *MockServiceMockRecorder) GetCourier(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourier", reflect.TypeOf((*MockService)(nil).GetCourier), ctx, id)
}

// GetCourierMetaInfo mocks base method.
func (m *MockService) GetCourierMetaInfo(ctx context.Context, id int, tr model.TimeRange) (*model.CourierInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierMetaInfo", ctx, id, tr)
	ret0, _ := ret[0].(*model.CourierInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourierMetaInfo indicates an expected call of GetCourierMetaInfo.
func (mr *MockServiceMockRecorder) GetCourierMetaInfo(ctx, id, tr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierMetaInfo", reflect.TypeOf((*MockService)(nil).GetCourierMetaInfo), ctx, id, tr)
}

// GetOrder mocks base method.
func (m *MockService) GetOrder(ctx context.Context, id int) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, id)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockServiceMockRecorder) GetOrder(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockService)(nil).GetOrder), ctx, id)
}

// ListCouriers mocks base method.
func (m *MockService) ListCouriers(ctx context.Context, pagination model.Pagination) (models.CourierSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCouriers", ctx, pagination)
	ret0, _ := ret[0].(models.CourierSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCouriers indicates an expected call of ListCouriers.
func (mr *MockServiceMockRecorder) ListCouriers(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCouriers", reflect.TypeOf((*MockService)(nil).ListCouriers), ctx, pagination)
}

// ListOrders mocks base method.
func (m *MockService) ListOrders(ctx context.Context, pagination model.Pagination) (models.OrderSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", ctx, pagination)
	ret0, _ := ret[0].(models.OrderSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockServiceMockRecorder) ListOrders(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockService)(nil).ListOrders), ctx, pagination)
}

// MockOrderService is a mock of OrderService interface.
type MockOrderService struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServiceMockRecorder
}

// MockOrderServiceMockRecorder is the mock recorder for MockOrderService.
type MockOrderServiceMockRecorder struct {
	mock *MockOrderService
}

// NewMockOrderService creates a new mock instance.
func NewMockOrderService(ctrl *gomock.Controller) *MockOrderService {
	mock := &MockOrderService{ctrl: ctrl}
	mock.recorder = &MockOrderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderService) EXPECT() *MockOrderServiceMockRecorder {
	return m.recorder
}

// AssignOrders mocks base method.
func (m *MockOrderService) AssignOrders(ctx context.Context, date time.Time) ([]model.AssignCouriers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignOrders", ctx, date)
	ret0, _ := ret[0].([]model.AssignCouriers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignOrders indicates an expected call of AssignOrders.
func (mr *MockOrderServiceMockRecorder) AssignOrders(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignOrders", reflect.TypeOf((*MockOrderService)(nil).AssignOrders), ctx, date)
}

// CompleteOrders mocks base method.
func (m *MockOrderService) CompleteOrders(ctx context.Context, params []model.CompleteInfo) (models.OrderSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompleteOrders", ctx, params)
	ret0, _ := ret[0].(models.OrderSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompleteOrders indicates an expected call of CompleteOrders.
func (mr *MockOrderServiceMockRecorder) CompleteOrders(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompleteOrders", reflect.TypeOf((*MockOrderService)(nil).CompleteOrders), ctx, params)
}

// CreateOrders mocks base method.
func (m *MockOrderService) CreateOrders(ctx context.Context, ords models.OrderSlice) (models.OrderSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrders", ctx, ords)
	ret0, _ := ret[0].(models.OrderSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrders indicates an expected call of CreateOrders.
func (mr *MockOrderServiceMockRecorder) CreateOrders(ctx, ords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrders", reflect.TypeOf((*MockOrderService)(nil).CreateOrders), ctx, ords)
}

// GetOrder mocks base method.
func (m *MockOrderService) GetOrder(ctx context.Context, id int) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, id)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderServiceMockRecorder) GetOrder(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderService)(nil).GetOrder), ctx, id)
}

// ListOrders mocks base method.
func (m *MockOrderService) ListOrders(ctx context.Context, pagination model.Pagination) (models.OrderSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", ctx, pagination)
	ret0, _ := ret[0].(models.OrderSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockOrderServiceMockRecorder) ListOrders(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockOrderService)(nil).ListOrders), ctx, pagination)
}

// MockCourierService is a mock of CourierService interface.
type MockCourierService struct {
	ctrl     *gomock.Controller
	recorder *MockCourierServiceMockRecorder
}

// MockCourierServiceMockRecorder is the mock recorder for MockCourierService.
type MockCourierServiceMockRecorder struct {
	mock *MockCourierService
}

// NewMockCourierService creates a new mock instance.
func NewMockCourierService(ctrl *gomock.Controller) *MockCourierService {
	mock := &MockCourierService{ctrl: ctrl}
	mock.recorder = &MockCourierServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCourierService) EXPECT() *MockCourierServiceMockRecorder {
	return m.recorder
}

// CouriersAssignment mocks base method.
func (m *MockCourierService) CouriersAssignment(ctx context.Context, id int, date time.Time) ([]model.AssignCouriers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CouriersAssignment", ctx, id, date)
	ret0, _ := ret[0].([]model.AssignCouriers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CouriersAssignment indicates an expected call of CouriersAssignment.
func (mr *MockCourierServiceMockRecorder) CouriersAssignment(ctx, id, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CouriersAssignment", reflect.TypeOf((*MockCourierService)(nil).CouriersAssignment), ctx, id, date)
}

// CreateCouriers mocks base method.
func (m *MockCourierService) CreateCouriers(ctx context.Context, couriers models.CourierSlice) (models.CourierSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCouriers", ctx, couriers)
	ret0, _ := ret[0].(models.CourierSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCouriers indicates an expected call of CreateCouriers.
func (mr *MockCourierServiceMockRecorder) CreateCouriers(ctx, couriers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCouriers", reflect.TypeOf((*MockCourierService)(nil).CreateCouriers), ctx, couriers)
}

// GetCourier mocks base method.
func (m *MockCourierService) GetCourier(ctx context.Context, id int) (*models.Courier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourier", ctx, id)
	ret0, _ := ret[0].(*models.Courier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourier indicates an expected call of GetCourier.
func (mr *MockCourierServiceMockRecorder) GetCourier(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourier", reflect.TypeOf((*MockCourierService)(nil).GetCourier), ctx, id)
}

// GetCourierMetaInfo mocks base method.
func (m *MockCourierService) GetCourierMetaInfo(ctx context.Context, id int, tr model.TimeRange) (*model.CourierInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCourierMetaInfo", ctx, id, tr)
	ret0, _ := ret[0].(*model.CourierInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCourierMetaInfo indicates an expected call of GetCourierMetaInfo.
func (mr *MockCourierServiceMockRecorder) GetCourierMetaInfo(ctx, id, tr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCourierMetaInfo", reflect.TypeOf((*MockCourierService)(nil).GetCourierMetaInfo), ctx, id, tr)
}

// ListCouriers mocks base method.
func (m *MockCourierService) ListCouriers(ctx context.Context, pagination model.Pagination) (models.CourierSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCouriers", ctx, pagination)
	ret0, _ := ret[0].(models.CourierSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCouriers indicates an expected call of ListCouriers.
func (mr *MockCourierServiceMockRecorder) ListCouriers(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCouriers", reflect.TypeOf((*MockCourierService)(nil).ListCouriers), ctx, pagination)
}
