name: CD

#permissions:
#  contents: write

on:
  workflow_dispatch:
#  push:
#    branches:
#      - master
#  workflow_run:
#    workflows: [ "CI" ]
#    types:
#      - completed

jobs:
  image:
    # if: github.repository == 'skip'
    name: build-image
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: astdockerid1/lavka
      IMAGE_TAG: actionv1
      COMMIT_HASH: ${{ github.sha }}

#      BUILDX_VERSION: latest
#      BUILDKIT_IMAGE: moby/buildkit:buildx-stable-1

    environment: default
    steps:
      - name: Code
        uses: actions/checkout@v3

      - name: Set env version
        run: echo "IMAGE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          # registry: docker.pkg.github.com # ghcr.io uses: docker://ghcr.io/OWNER/IMAGE_NAME
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
#        with:
#          version: ${{ inputs.buildx-version || env.BUILDX_VERSION }}
#          driver-opts: |
#            image=${{ inputs.buildkit-image || env.BUILDKIT_IMAGE }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }} # -${{ hashFiles('Dockerfile') }}
          restore-keys: ${{ runner.os }}-buildx-

      - uses: docker/build-push-action@v4
        with:
          file: ./Dockerfile
          push: true # false
          # platforms: linux/amd64,linux/arm64
          # <org-name>/<repo-name>/<app-name>:${{ env.IMAGE_TAG }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  deploy:
    # if: ${{ github.event.workflow_run.image == 'success' }}
    runs-on: ubuntu-latest
    needs: image
    # if: always() # success()
    environment: production
    concurrency: production

    env:
      WORK_DIR: ~/lavka
    steps:
      - name: Code
        uses: actions/checkout@v3

      - name: Transfer compose
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "ci/docker-compose.yaml,.env"
          target: "/${{ secrets.SSH_USER }}/lavka"

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          # port: ${{ secrets.PORT }}
          script: |
            mv lavka/ci/docker-compose.yaml lavka
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            docker compose -f ./lavka/docker-compose.yaml --env-file ./lavka/.env down || echo 'no lavka-compose'
            docker compose -f ./lavka/docker-compose.yaml --env-file ./lavka/.env up -d


  notification:
    runs-on: ubuntu-latest
    needs: deploy
    # if: github.repository == 'skip' #always()
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: send notification
        run: |
          LAST_JOB_STATUS=$(gh run list --workflow workflow_history.yaml | grep -oh "completed.*" | head -1 | awk '{print $2}')
          TG_URL="https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
          MSG_TEXT="CI/CD status: ${LAST_JOB_STATUS}\n Project: ${{ github.event.repository.name }}\nURL: ${{ github.event.repository.url}}/pipelines/$CI_PIPELINE_ID/\nBranch: $GITHUB_REF"
          curl -s --max-time 5 -X POST -H "Content-Type: application/json" -d "{\"chat_id\":\"${{secrets.TELEGRAM_USER_ID}}\",\"disable_web_page_preview\":1,\"text\":\"${MSG_TEXT}\"}" ${TG_URL} > /dev/null




