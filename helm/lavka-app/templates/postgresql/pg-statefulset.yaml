apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "db.name" . }}-sts
  namespace: {{ include "lavka-app.namespace" . }}
  labels: {{- include "db.labels" . | nindent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-2"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  replicas: {{.Values.db.replicaCount}}
  selector:
    matchLabels: {{- include "db.selectorLabels" . | nindent 6 }}

  serviceName: {{ include "db.name" . }}-lb
  updateStrategy:
    type: {{ .Values.db.updateStrategy.type }}
    {{- if (eq "Recreate" .Values.db.updateStrategy.type) }}
    rollingUpdate: null
    {{- else if .Values.db.updateStrategy.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.db.updateStrategy.rollingUpdatePartition }}
      maxUnavailable: {{ .Values.db.updateStrategy.maxUnavailable }}
    {{- end }}
  template:
    metadata:
      labels: {{- include "db.labels" . | nindent 8 }}
    spec:
      {{- with .Values.db.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{/*      serviceAccountName: {{ template "db.serviceAccountName" . }}*/}}

{{/*      restartPolicy: Always*/}}
      {{- with .Values.db.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.db.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.db.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.db.priority.className }}
      priorityClassName: {{ .Values.db.priority.className | quote }}
      {{- else if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
{{/*      {{- if .Values.db.podSecurityContext.enabled }}*/}}
{{/*      securityContext: {{- omit .Values.db.podSecurityContext "enabled" | toYaml | nindent 8 }}*/}}
{{/*      {{- end }}*/}}
      containers:
        - name: postgres-db
          image: "{{ .Values.db.image.repository }}:{{ .Values.db.image.tag }}"
          imagePullPolicy: {{ .Values.db.image.pullPolicy | quote }}
          {{- if .Values.db.containerSecurityContext.enabled }}
          securityContext: {{- toYaml .Values.db.containerSecurityContext.securityContext | nindent 12 }}
          {{- end }}

          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "db.name" . }}-secret
                  key: postgresql-password
          envFrom:
            - configMapRef:
                name: {{ include "db.name" . }}-config

          ports:
            - name: {{ .Values.db.portName }}
              containerPort: {{ .Values.db.containerPort }}
              protocol: TCP

          {{- if .Values.db.probeEnabled }}
          {{- include "db.health" . | nindent 10 }}
          {{- end }}

          {{- with .Values.db.resources }}
          resources: {{ toYaml . | nindent 12 }}
          {{- end }}

          volumeMounts:
            - name: {{ include "db.name" . }}-data
              mountPath: /data
              {{- if .Values.db.persistence.subPath }}
              subPath: {{ .Values.db.persistence.subPath }}
              {{- end }}
{{/*            {{- if or .Values.db.initdbScriptsConfigMap .Values.db.initdbScripts }}*/}}
{{/*            - name: custom-init-scripts*/}}
{{/*              mountPath: /docker-entrypoint-initdb.d*/}}
{{/*            {{- end }}*/}}
{{/*            {{- if or .Values.db.configuration .Values.db.existingConfigmap }}*/}}
{{/*            - name: config*/}}
{{/*              mountPath: /opt/db/conf/c.cnf*/}}
{{/*              subPath: c.cnf*/}}
{{/*            {{- end }}*/}}


      volumes:
{{/*        {{- if or .Values.db.configuration .Values.db.existingConfigmap }}*/}}
{{/*        - name: config*/}}
{{/*          configMap:*/}}
{{/*            name: {{ include "db.configmapName" . }}*/}}
{{/*        {{- end }}*/}}
{{/*        {{- if or .Values.initdbScriptsConfigMap .Values.initdbScripts }}*/}}
{{/*        - name: custom-init-scripts*/}}
{{/*          configMap:*/}}
{{/*            name: {{ template "db.initdbScriptsCM" . }}*/}}
{{/*        {{- end }}*/}}

  {{- if and .Values.db.persistence.enabled .Values.db.persistence.claimName }}
        - name: {{ include "db.name" . }}-data
          persistentVolumeClaim:
            claimName: {{ tpl .Values.db.persistence.claimName . }}
  {{- else if not .Values.db.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else if and .Values.db.persistence.enabled (not .Values.db.persistence.claimName) }}
  volumeClaimTemplates:
    - metadata:
        name: {{ include "db.name" . }}-data
        labels: {{ include "db.selectorLabels" . | nindent 10 }}
      spec:
        accessModes:
          {{- range .Values.db.persistence.accessModes }}
          - {{ . | quote }}
          {{- end }}
        resources:
          requests:
            storage: {{ .Values.db.persistence.size | quote }}

  {{- end }}
