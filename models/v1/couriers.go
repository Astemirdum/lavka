// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Courier is an object representing the database table.
type Courier struct {
	ID           int64             `boil:"id" json:"ID" toml:"ID" yaml:"ID"`
	CourierType  CourierType       `boil:"courier_type" json:"CourierType" toml:"CourierType" yaml:"CourierType"`
	Regions      types.Int64Array  `boil:"regions" json:"Regions,omitempty" toml:"Regions" yaml:"Regions,omitempty"`
	WorkingHours types.StringArray `boil:"working_hours" json:"WorkingHours,omitempty" toml:"WorkingHours" yaml:"WorkingHours,omitempty"`
	CreatedAt    null.Time         `boil:"created_at" json:"CreatedAt,omitempty" toml:"CreatedAt" yaml:"CreatedAt,omitempty"`
	DeletedAt    null.Time         `boil:"deleted_at" json:"DeletedAt,omitempty" toml:"DeletedAt" yaml:"DeletedAt,omitempty"`

	R *courierR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L courierL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CourierColumns = struct {
	ID           string
	CourierType  string
	Regions      string
	WorkingHours string
	CreatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	CourierType:  "courier_type",
	Regions:      "regions",
	WorkingHours: "working_hours",
	CreatedAt:    "created_at",
	DeletedAt:    "deleted_at",
}

var CourierTableColumns = struct {
	ID           string
	CourierType  string
	Regions      string
	WorkingHours string
	CreatedAt    string
	DeletedAt    string
}{
	ID:           "couriers.id",
	CourierType:  "couriers.courier_type",
	Regions:      "couriers.regions",
	WorkingHours: "couriers.working_hours",
	CreatedAt:    "couriers.created_at",
	DeletedAt:    "couriers.deleted_at",
}

// Generated where

type whereHelpertypes_StringArray struct{ field string }

func (w whereHelpertypes_StringArray) EQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_StringArray) NEQ(x types.StringArray) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_StringArray) LT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_StringArray) LTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_StringArray) GT(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_StringArray) GTE(x types.StringArray) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_StringArray) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_StringArray) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CourierWhere = struct {
	ID           whereHelperint64
	CourierType  whereHelperCourierType
	Regions      whereHelpertypes_Int64Array
	WorkingHours whereHelpertypes_StringArray
	CreatedAt    whereHelpernull_Time
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperint64{field: "\"lk\".\"couriers\".\"id\""},
	CourierType:  whereHelperCourierType{field: "\"lk\".\"couriers\".\"courier_type\""},
	Regions:      whereHelpertypes_Int64Array{field: "\"lk\".\"couriers\".\"regions\""},
	WorkingHours: whereHelpertypes_StringArray{field: "\"lk\".\"couriers\".\"working_hours\""},
	CreatedAt:    whereHelpernull_Time{field: "\"lk\".\"couriers\".\"created_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"lk\".\"couriers\".\"deleted_at\""},
}

// CourierRels is where relationship names are stored.
var CourierRels = struct {
	Assignments    string
	CouriersOrders string
}{
	Assignments:    "Assignments",
	CouriersOrders: "CouriersOrders",
}

// courierR is where relationships are stored.
type courierR struct {
	Assignments    AssignmentSlice    `boil:"Assignments" json:"Assignments" toml:"Assignments" yaml:"Assignments"`
	CouriersOrders CouriersOrderSlice `boil:"CouriersOrders" json:"CouriersOrders" toml:"CouriersOrders" yaml:"CouriersOrders"`
}

// NewStruct creates a new relationship struct
func (*courierR) NewStruct() *courierR {
	return &courierR{}
}

func (r *courierR) GetAssignments() AssignmentSlice {
	if r == nil {
		return nil
	}
	return r.Assignments
}

func (r *courierR) GetCouriersOrders() CouriersOrderSlice {
	if r == nil {
		return nil
	}
	return r.CouriersOrders
}

// courierL is where Load methods for each relationship are stored.
type courierL struct{}

var (
	courierAllColumns            = []string{"id", "courier_type", "regions", "working_hours", "created_at", "deleted_at"}
	courierColumnsWithoutDefault = []string{"courier_type"}
	courierColumnsWithDefault    = []string{"id", "regions", "working_hours", "created_at", "deleted_at"}
	courierPrimaryKeyColumns     = []string{"id"}
	courierGeneratedColumns      = []string{"id"}
)

type (
	// CourierSlice is an alias for a slice of pointers to Courier.
	// This should almost always be used instead of []Courier.
	CourierSlice []*Courier

	courierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	courierType                 = reflect.TypeOf(&Courier{})
	courierMapping              = queries.MakeStructMapping(courierType)
	courierPrimaryKeyMapping, _ = queries.BindMapping(courierType, courierMapping, courierPrimaryKeyColumns)
	courierInsertCacheMut       sync.RWMutex
	courierInsertCache          = make(map[string]insertCache)
	courierUpdateCacheMut       sync.RWMutex
	courierUpdateCache          = make(map[string]updateCache)
	courierUpsertCacheMut       sync.RWMutex
	courierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single courier record from the query.
func (q courierQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Courier, error) {
	o := &Courier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for couriers")
	}

	return o, nil
}

// All returns all Courier records from the query.
func (q courierQuery) All(ctx context.Context, exec boil.ContextExecutor) (CourierSlice, error) {
	var o []*Courier

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Courier slice")
	}

	return o, nil
}

// Count returns the count of all Courier records in the query.
func (q courierQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count couriers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q courierQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if couriers exists")
	}

	return count > 0, nil
}

// Assignments retrieves all the assignment's Assignments with an executor.
func (o *Courier) Assignments(mods ...qm.QueryMod) assignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"lk\".\"assignments\".\"courier_id\"=?", o.ID),
	)

	return Assignments(queryMods...)
}

// CouriersOrders retrieves all the couriers_order's CouriersOrders with an executor.
func (o *Courier) CouriersOrders(mods ...qm.QueryMod) couriersOrderQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"lk\".\"couriers_orders\".\"courier_id\"=?", o.ID),
	)

	return CouriersOrders(queryMods...)
}

// LoadAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courierL) LoadAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourier interface{}, mods queries.Applicator) error {
	var slice []*Courier
	var object *Courier

	if singular {
		var ok bool
		object, ok = maybeCourier.(*Courier)
		if !ok {
			object = new(Courier)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCourier)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCourier))
			}
		}
	} else {
		s, ok := maybeCourier.(*[]*Courier)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCourier)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCourier))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lk.assignments`),
		qm.WhereIn(`lk.assignments.courier_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assignments")
	}

	var resultSlice []*Assignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assignments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assignments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assignments")
	}

	if singular {
		object.R.Assignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignmentR{}
			}
			foreign.R.Courier = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourierID {
				local.R.Assignments = append(local.R.Assignments, foreign)
				if foreign.R == nil {
					foreign.R = &assignmentR{}
				}
				foreign.R.Courier = local
				break
			}
		}
	}

	return nil
}

// LoadCouriersOrders allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (courierL) LoadCouriersOrders(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCourier interface{}, mods queries.Applicator) error {
	var slice []*Courier
	var object *Courier

	if singular {
		var ok bool
		object, ok = maybeCourier.(*Courier)
		if !ok {
			object = new(Courier)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCourier)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCourier))
			}
		}
	} else {
		s, ok := maybeCourier.(*[]*Courier)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCourier)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCourier))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &courierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &courierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lk.couriers_orders`),
		qm.WhereIn(`lk.couriers_orders.courier_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load couriers_orders")
	}

	var resultSlice []*CouriersOrder
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice couriers_orders")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on couriers_orders")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for couriers_orders")
	}

	if singular {
		object.R.CouriersOrders = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &couriersOrderR{}
			}
			foreign.R.Courier = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CourierID {
				local.R.CouriersOrders = append(local.R.CouriersOrders, foreign)
				if foreign.R == nil {
					foreign.R = &couriersOrderR{}
				}
				foreign.R.Courier = local
				break
			}
		}
	}

	return nil
}

// AddAssignments adds the given related objects to the existing relationships
// of the courier, optionally inserting them as new records.
// Appends related to o.R.Assignments.
// Sets related.R.Courier appropriately.
func (o *Courier) AddAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"lk\".\"assignments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"courier_id"}),
				strmangle.WhereClause("\"", "\"", 2, assignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courierR{
			Assignments: related,
		}
	} else {
		o.R.Assignments = append(o.R.Assignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignmentR{
				Courier: o,
			}
		} else {
			rel.R.Courier = o
		}
	}
	return nil
}

// AddCouriersOrders adds the given related objects to the existing relationships
// of the courier, optionally inserting them as new records.
// Appends related to o.R.CouriersOrders.
// Sets related.R.Courier appropriately.
func (o *Courier) AddCouriersOrders(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CouriersOrder) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CourierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"lk\".\"couriers_orders\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"courier_id"}),
				strmangle.WhereClause("\"", "\"", 2, couriersOrderPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CourierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &courierR{
			CouriersOrders: related,
		}
	} else {
		o.R.CouriersOrders = append(o.R.CouriersOrders, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &couriersOrderR{
				Courier: o,
			}
		} else {
			rel.R.Courier = o
		}
	}
	return nil
}

// Couriers retrieves all the records using an executor.
func Couriers(mods ...qm.QueryMod) courierQuery {
	mods = append(mods, qm.From("\"lk\".\"couriers\""), qmhelper.WhereIsNull("\"lk\".\"couriers\".\"deleted_at\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"lk\".\"couriers\".*"})
	}

	return courierQuery{q}
}

// FindCourier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCourier(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Courier, error) {
	courierObj := &Courier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lk\".\"couriers\" where \"id\"=$1 and \"deleted_at\" is null", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, courierObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from couriers")
	}

	return courierObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Courier) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no couriers provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(courierColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	courierInsertCacheMut.RLock()
	cache, cached := courierInsertCache[key]
	courierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			courierAllColumns,
			courierColumnsWithDefault,
			courierColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, courierGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(courierType, courierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(courierType, courierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lk\".\"couriers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lk\".\"couriers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into couriers")
	}

	if !cached {
		courierInsertCacheMut.Lock()
		courierInsertCache[key] = cache
		courierInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Courier.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Courier) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	courierUpdateCacheMut.RLock()
	cache, cached := courierUpdateCache[key]
	courierUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			courierAllColumns,
			courierPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, courierGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update couriers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lk\".\"couriers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, courierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(courierType, courierMapping, append(wl, courierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update couriers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for couriers")
	}

	if !cached {
		courierUpdateCacheMut.Lock()
		courierUpdateCache[key] = cache
		courierUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q courierQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for couriers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for couriers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CourierSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), courierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lk\".\"couriers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, courierPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in courier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all courier")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Courier) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no couriers provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(courierColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	courierUpsertCacheMut.RLock()
	cache, cached := courierUpsertCache[key]
	courierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			courierAllColumns,
			courierColumnsWithDefault,
			courierColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			courierAllColumns,
			courierPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, courierGeneratedColumns)
		update = strmangle.SetComplement(update, courierGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert couriers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(courierPrimaryKeyColumns))
			copy(conflict, courierPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lk\".\"couriers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(courierType, courierMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(courierType, courierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert couriers")
	}

	if !cached {
		courierUpsertCacheMut.Lock()
		courierUpsertCache[key] = cache
		courierUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Courier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Courier) Delete(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Courier provided for delete")
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), courierPrimaryKeyMapping)
		sql = "DELETE FROM \"lk\".\"couriers\" WHERE \"id\"=$1"
	} else {
		currTime := time.Now().In(boil.GetLocation())
		o.DeletedAt = null.TimeFrom(currTime)
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"lk\".\"couriers\" SET %s WHERE \"id\"=$2",
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		valueMapping, err := queries.BindMapping(courierType, courierMapping, append(wl, courierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
		args = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valueMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from couriers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for couriers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q courierQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no courierQuery provided for delete all")
	}

	if hardDelete {
		queries.SetDelete(q.Query)
	} else {
		currTime := time.Now().In(boil.GetLocation())
		queries.SetUpdate(q.Query, M{"deleted_at": currTime})
	}

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from couriers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for couriers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CourierSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor, hardDelete bool) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var (
		sql  string
		args []interface{}
	)
	if hardDelete {
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), courierPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
		}
		sql = "DELETE FROM \"lk\".\"couriers\" WHERE " +
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, courierPrimaryKeyColumns, len(o))
	} else {
		currTime := time.Now().In(boil.GetLocation())
		for _, obj := range o {
			pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), courierPrimaryKeyMapping)
			args = append(args, pkeyArgs...)
			obj.DeletedAt = null.TimeFrom(currTime)
		}
		wl := []string{"deleted_at"}
		sql = fmt.Sprintf("UPDATE \"lk\".\"couriers\" SET %s WHERE "+
			strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 2, courierPrimaryKeyColumns, len(o)),
			strmangle.SetParamNames("\"", "\"", 1, wl),
		)
		args = append([]interface{}{currTime}, args...)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from courier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for couriers")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Courier) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCourier(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CourierSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CourierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), courierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lk\".\"couriers\".* FROM \"lk\".\"couriers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, courierPrimaryKeyColumns, len(*o)) +
		"and \"deleted_at\" is null"

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CourierSlice")
	}

	*o = slice

	return nil
}

// CourierExists checks if the Courier row exists.
func CourierExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lk\".\"couriers\" where \"id\"=$1 and \"deleted_at\" is null limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if couriers exists")
	}

	return exists, nil
}

// Exists checks if the Courier row exists.
func (o *Courier) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CourierExists(ctx, exec, o.ID)
}
