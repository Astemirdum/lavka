// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Assignment is an object representing the database table.
type Assignment struct {
	ID            int64            `boil:"id" json:"ID" toml:"ID" yaml:"ID"`
	DateID        int              `boil:"date_id" json:"DateID" toml:"DateID" yaml:"DateID"`
	CourierID     int64            `boil:"courier_id" json:"CourierID" toml:"CourierID" yaml:"CourierID"`
	GroupOrderIds types.Int64Array `boil:"group_order_ids" json:"GroupOrderIds,omitempty" toml:"GroupOrderIds" yaml:"GroupOrderIds,omitempty"`

	R *assignmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assignmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssignmentColumns = struct {
	ID            string
	DateID        string
	CourierID     string
	GroupOrderIds string
}{
	ID:            "id",
	DateID:        "date_id",
	CourierID:     "courier_id",
	GroupOrderIds: "group_order_ids",
}

var AssignmentTableColumns = struct {
	ID            string
	DateID        string
	CourierID     string
	GroupOrderIds string
}{
	ID:            "assignments.id",
	DateID:        "assignments.date_id",
	CourierID:     "assignments.courier_id",
	GroupOrderIds: "assignments.group_order_ids",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertypes_Int64Array struct{ field string }

func (w whereHelpertypes_Int64Array) EQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_Int64Array) NEQ(x types.Int64Array) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_Int64Array) LT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Int64Array) LTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Int64Array) GT(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Int64Array) GTE(x types.Int64Array) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_Int64Array) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_Int64Array) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AssignmentWhere = struct {
	ID            whereHelperint64
	DateID        whereHelperint
	CourierID     whereHelperint64
	GroupOrderIds whereHelpertypes_Int64Array
}{
	ID:            whereHelperint64{field: "\"lk\".\"assignments\".\"id\""},
	DateID:        whereHelperint{field: "\"lk\".\"assignments\".\"date_id\""},
	CourierID:     whereHelperint64{field: "\"lk\".\"assignments\".\"courier_id\""},
	GroupOrderIds: whereHelpertypes_Int64Array{field: "\"lk\".\"assignments\".\"group_order_ids\""},
}

// AssignmentRels is where relationship names are stored.
var AssignmentRels = struct {
	Courier string
	Date    string
}{
	Courier: "Courier",
	Date:    "Date",
}

// assignmentR is where relationships are stored.
type assignmentR struct {
	Courier *Courier         `boil:"Courier" json:"Courier" toml:"Courier" yaml:"Courier"`
	Date    *AssignmentsDate `boil:"Date" json:"Date" toml:"Date" yaml:"Date"`
}

// NewStruct creates a new relationship struct
func (*assignmentR) NewStruct() *assignmentR {
	return &assignmentR{}
}

func (r *assignmentR) GetCourier() *Courier {
	if r == nil {
		return nil
	}
	return r.Courier
}

func (r *assignmentR) GetDate() *AssignmentsDate {
	if r == nil {
		return nil
	}
	return r.Date
}

// assignmentL is where Load methods for each relationship are stored.
type assignmentL struct{}

var (
	assignmentAllColumns            = []string{"id", "date_id", "courier_id", "group_order_ids"}
	assignmentColumnsWithoutDefault = []string{"date_id", "courier_id"}
	assignmentColumnsWithDefault    = []string{"id", "group_order_ids"}
	assignmentPrimaryKeyColumns     = []string{"id"}
	assignmentGeneratedColumns      = []string{"id"}
)

type (
	// AssignmentSlice is an alias for a slice of pointers to Assignment.
	// This should almost always be used instead of []Assignment.
	AssignmentSlice []*Assignment

	assignmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assignmentType                 = reflect.TypeOf(&Assignment{})
	assignmentMapping              = queries.MakeStructMapping(assignmentType)
	assignmentPrimaryKeyMapping, _ = queries.BindMapping(assignmentType, assignmentMapping, assignmentPrimaryKeyColumns)
	assignmentInsertCacheMut       sync.RWMutex
	assignmentInsertCache          = make(map[string]insertCache)
	assignmentUpdateCacheMut       sync.RWMutex
	assignmentUpdateCache          = make(map[string]updateCache)
	assignmentUpsertCacheMut       sync.RWMutex
	assignmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single assignment record from the query.
func (q assignmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Assignment, error) {
	o := &Assignment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for assignments")
	}

	return o, nil
}

// All returns all Assignment records from the query.
func (q assignmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssignmentSlice, error) {
	var o []*Assignment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Assignment slice")
	}

	return o, nil
}

// Count returns the count of all Assignment records in the query.
func (q assignmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assignments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assignmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assignments exists")
	}

	return count > 0, nil
}

// Courier pointed to by the foreign key.
func (o *Assignment) Courier(mods ...qm.QueryMod) courierQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CourierID),
	}

	queryMods = append(queryMods, mods...)

	return Couriers(queryMods...)
}

// Date pointed to by the foreign key.
func (o *Assignment) Date(mods ...qm.QueryMod) assignmentsDateQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DateID),
	}

	queryMods = append(queryMods, mods...)

	return AssignmentsDates(queryMods...)
}

// LoadCourier allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignmentL) LoadCourier(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignment interface{}, mods queries.Applicator) error {
	var slice []*Assignment
	var object *Assignment

	if singular {
		var ok bool
		object, ok = maybeAssignment.(*Assignment)
		if !ok {
			object = new(Assignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignment))
			}
		}
	} else {
		s, ok := maybeAssignment.(*[]*Assignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignmentR{}
		}
		args = append(args, object.CourierID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignmentR{}
			}

			for _, a := range args {
				if a == obj.CourierID {
					continue Outer
				}
			}

			args = append(args, obj.CourierID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lk.couriers`),
		qm.WhereIn(`lk.couriers.id in ?`, args...),
		qmhelper.WhereIsNull(`lk.couriers.deleted_at`),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Courier")
	}

	var resultSlice []*Courier
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Courier")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for couriers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for couriers")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Courier = foreign
		if foreign.R == nil {
			foreign.R = &courierR{}
		}
		foreign.R.Assignments = append(foreign.R.Assignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CourierID == foreign.ID {
				local.R.Courier = foreign
				if foreign.R == nil {
					foreign.R = &courierR{}
				}
				foreign.R.Assignments = append(foreign.R.Assignments, local)
				break
			}
		}
	}

	return nil
}

// LoadDate allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (assignmentL) LoadDate(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignment interface{}, mods queries.Applicator) error {
	var slice []*Assignment
	var object *Assignment

	if singular {
		var ok bool
		object, ok = maybeAssignment.(*Assignment)
		if !ok {
			object = new(Assignment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignment))
			}
		}
	} else {
		s, ok := maybeAssignment.(*[]*Assignment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignmentR{}
		}
		args = append(args, object.DateID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignmentR{}
			}

			for _, a := range args {
				if a == obj.DateID {
					continue Outer
				}
			}

			args = append(args, obj.DateID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lk.assignments_dates`),
		qm.WhereIn(`lk.assignments_dates.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AssignmentsDate")
	}

	var resultSlice []*AssignmentsDate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AssignmentsDate")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for assignments_dates")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assignments_dates")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Date = foreign
		if foreign.R == nil {
			foreign.R = &assignmentsDateR{}
		}
		foreign.R.DateAssignments = append(foreign.R.DateAssignments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DateID == foreign.ID {
				local.R.Date = foreign
				if foreign.R == nil {
					foreign.R = &assignmentsDateR{}
				}
				foreign.R.DateAssignments = append(foreign.R.DateAssignments, local)
				break
			}
		}
	}

	return nil
}

// SetCourier of the assignment to the related item.
// Sets o.R.Courier to related.
// Adds o to related.R.Assignments.
func (o *Assignment) SetCourier(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Courier) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"lk\".\"assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"courier_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CourierID = related.ID
	if o.R == nil {
		o.R = &assignmentR{
			Courier: related,
		}
	} else {
		o.R.Courier = related
	}

	if related.R == nil {
		related.R = &courierR{
			Assignments: AssignmentSlice{o},
		}
	} else {
		related.R.Assignments = append(related.R.Assignments, o)
	}

	return nil
}

// SetDate of the assignment to the related item.
// Sets o.R.Date to related.
// Adds o to related.R.DateAssignments.
func (o *Assignment) SetDate(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AssignmentsDate) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"lk\".\"assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"date_id"}),
		strmangle.WhereClause("\"", "\"", 2, assignmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DateID = related.ID
	if o.R == nil {
		o.R = &assignmentR{
			Date: related,
		}
	} else {
		o.R.Date = related
	}

	if related.R == nil {
		related.R = &assignmentsDateR{
			DateAssignments: AssignmentSlice{o},
		}
	} else {
		related.R.DateAssignments = append(related.R.DateAssignments, o)
	}

	return nil
}

// Assignments retrieves all the records using an executor.
func Assignments(mods ...qm.QueryMod) assignmentQuery {
	mods = append(mods, qm.From("\"lk\".\"assignments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"lk\".\"assignments\".*"})
	}

	return assignmentQuery{q}
}

// FindAssignment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignment(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Assignment, error) {
	assignmentObj := &Assignment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lk\".\"assignments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, assignmentObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from assignments")
	}

	return assignmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Assignment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assignments provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(assignmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assignmentInsertCacheMut.RLock()
	cache, cached := assignmentInsertCache[key]
	assignmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assignmentAllColumns,
			assignmentColumnsWithDefault,
			assignmentColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, assignmentGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(assignmentType, assignmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assignmentType, assignmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lk\".\"assignments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lk\".\"assignments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assignments")
	}

	if !cached {
		assignmentInsertCacheMut.Lock()
		assignmentInsertCache[key] = cache
		assignmentInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Assignment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Assignment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	assignmentUpdateCacheMut.RLock()
	cache, cached := assignmentUpdateCache[key]
	assignmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assignmentAllColumns,
			assignmentPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, assignmentGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assignments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lk\".\"assignments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assignmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assignmentType, assignmentMapping, append(wl, assignmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assignments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assignments")
	}

	if !cached {
		assignmentUpdateCacheMut.Lock()
		assignmentUpdateCache[key] = cache
		assignmentUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q assignmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assignments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssignmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lk\".\"assignments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assignmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assignment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Assignment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assignments provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(assignmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assignmentUpsertCacheMut.RLock()
	cache, cached := assignmentUpsertCache[key]
	assignmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assignmentAllColumns,
			assignmentColumnsWithDefault,
			assignmentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assignmentAllColumns,
			assignmentPrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, assignmentGeneratedColumns)
		update = strmangle.SetComplement(update, assignmentGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assignments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assignmentPrimaryKeyColumns))
			copy(conflict, assignmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lk\".\"assignments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assignmentType, assignmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assignmentType, assignmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assignments")
	}

	if !cached {
		assignmentUpsertCacheMut.Lock()
		assignmentUpsertCache[key] = cache
		assignmentUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Assignment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Assignment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Assignment provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assignmentPrimaryKeyMapping)
	sql := "DELETE FROM \"lk\".\"assignments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assignments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assignmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assignmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assignments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assignments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssignmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"lk\".\"assignments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assignment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assignments")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Assignment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssignment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssignmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssignmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lk\".\"assignments\".* FROM \"lk\".\"assignments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssignmentSlice")
	}

	*o = slice

	return nil
}

// AssignmentExists checks if the Assignment row exists.
func AssignmentExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lk\".\"assignments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assignments exists")
	}

	return exists, nil
}

// Exists checks if the Assignment row exists.
func (o *Assignment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AssignmentExists(ctx, exec, o.ID)
}
