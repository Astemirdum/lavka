// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssignmentsDate is an object representing the database table.
type AssignmentsDate struct {
	ID      int       `boil:"id" json:"ID" toml:"ID" yaml:"ID"`
	Date    time.Time `boil:"date" json:"Date" toml:"Date" yaml:"Date"`
	Version int       `boil:"version" json:"Version" toml:"Version" yaml:"Version"`

	R *assignmentsDateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assignmentsDateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssignmentsDateColumns = struct {
	ID      string
	Date    string
	Version string
}{
	ID:      "id",
	Date:    "date",
	Version: "version",
}

var AssignmentsDateTableColumns = struct {
	ID      string
	Date    string
	Version string
}{
	ID:      "assignments_dates.id",
	Date:    "assignments_dates.date",
	Version: "assignments_dates.version",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AssignmentsDateWhere = struct {
	ID      whereHelperint
	Date    whereHelpertime_Time
	Version whereHelperint
}{
	ID:      whereHelperint{field: "\"lk\".\"assignments_dates\".\"id\""},
	Date:    whereHelpertime_Time{field: "\"lk\".\"assignments_dates\".\"date\""},
	Version: whereHelperint{field: "\"lk\".\"assignments_dates\".\"version\""},
}

// AssignmentsDateRels is where relationship names are stored.
var AssignmentsDateRels = struct {
	DateAssignments string
}{
	DateAssignments: "DateAssignments",
}

// assignmentsDateR is where relationships are stored.
type assignmentsDateR struct {
	DateAssignments AssignmentSlice `boil:"DateAssignments" json:"DateAssignments" toml:"DateAssignments" yaml:"DateAssignments"`
}

// NewStruct creates a new relationship struct
func (*assignmentsDateR) NewStruct() *assignmentsDateR {
	return &assignmentsDateR{}
}

func (r *assignmentsDateR) GetDateAssignments() AssignmentSlice {
	if r == nil {
		return nil
	}
	return r.DateAssignments
}

// assignmentsDateL is where Load methods for each relationship are stored.
type assignmentsDateL struct{}

var (
	assignmentsDateAllColumns            = []string{"id", "date", "version"}
	assignmentsDateColumnsWithoutDefault = []string{"date"}
	assignmentsDateColumnsWithDefault    = []string{"id", "version"}
	assignmentsDatePrimaryKeyColumns     = []string{"id"}
	assignmentsDateGeneratedColumns      = []string{"id"}
)

type (
	// AssignmentsDateSlice is an alias for a slice of pointers to AssignmentsDate.
	// This should almost always be used instead of []AssignmentsDate.
	AssignmentsDateSlice []*AssignmentsDate

	assignmentsDateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assignmentsDateType                 = reflect.TypeOf(&AssignmentsDate{})
	assignmentsDateMapping              = queries.MakeStructMapping(assignmentsDateType)
	assignmentsDatePrimaryKeyMapping, _ = queries.BindMapping(assignmentsDateType, assignmentsDateMapping, assignmentsDatePrimaryKeyColumns)
	assignmentsDateInsertCacheMut       sync.RWMutex
	assignmentsDateInsertCache          = make(map[string]insertCache)
	assignmentsDateUpdateCacheMut       sync.RWMutex
	assignmentsDateUpdateCache          = make(map[string]updateCache)
	assignmentsDateUpsertCacheMut       sync.RWMutex
	assignmentsDateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single assignmentsDate record from the query.
func (q assignmentsDateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssignmentsDate, error) {
	o := &AssignmentsDate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to execute a one query for assignments_dates")
	}

	return o, nil
}

// All returns all AssignmentsDate records from the query.
func (q assignmentsDateQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssignmentsDateSlice, error) {
	var o []*AssignmentsDate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AssignmentsDate slice")
	}

	return o, nil
}

// Count returns the count of all AssignmentsDate records in the query.
func (q assignmentsDateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count assignments_dates rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q assignmentsDateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if assignments_dates exists")
	}

	return count > 0, nil
}

// DateAssignments retrieves all the assignment's Assignments with an executor via date_id column.
func (o *AssignmentsDate) DateAssignments(mods ...qm.QueryMod) assignmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"lk\".\"assignments\".\"date_id\"=?", o.ID),
	)

	return Assignments(queryMods...)
}

// LoadDateAssignments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (assignmentsDateL) LoadDateAssignments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAssignmentsDate interface{}, mods queries.Applicator) error {
	var slice []*AssignmentsDate
	var object *AssignmentsDate

	if singular {
		var ok bool
		object, ok = maybeAssignmentsDate.(*AssignmentsDate)
		if !ok {
			object = new(AssignmentsDate)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAssignmentsDate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAssignmentsDate))
			}
		}
	} else {
		s, ok := maybeAssignmentsDate.(*[]*AssignmentsDate)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAssignmentsDate)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAssignmentsDate))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &assignmentsDateR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &assignmentsDateR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`lk.assignments`),
		qm.WhereIn(`lk.assignments.date_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load assignments")
	}

	var resultSlice []*Assignment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice assignments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on assignments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for assignments")
	}

	if singular {
		object.R.DateAssignments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &assignmentR{}
			}
			foreign.R.Date = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DateID {
				local.R.DateAssignments = append(local.R.DateAssignments, foreign)
				if foreign.R == nil {
					foreign.R = &assignmentR{}
				}
				foreign.R.Date = local
				break
			}
		}
	}

	return nil
}

// AddDateAssignments adds the given related objects to the existing relationships
// of the assignments_date, optionally inserting them as new records.
// Appends related to o.R.DateAssignments.
// Sets related.R.Date appropriately.
func (o *AssignmentsDate) AddDateAssignments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Assignment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DateID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"lk\".\"assignments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"date_id"}),
				strmangle.WhereClause("\"", "\"", 2, assignmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DateID = o.ID
		}
	}

	if o.R == nil {
		o.R = &assignmentsDateR{
			DateAssignments: related,
		}
	} else {
		o.R.DateAssignments = append(o.R.DateAssignments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assignmentR{
				Date: o,
			}
		} else {
			rel.R.Date = o
		}
	}
	return nil
}

// AssignmentsDates retrieves all the records using an executor.
func AssignmentsDates(mods ...qm.QueryMod) assignmentsDateQuery {
	mods = append(mods, qm.From("\"lk\".\"assignments_dates\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"lk\".\"assignments_dates\".*"})
	}

	return assignmentsDateQuery{q}
}

// FindAssignmentsDate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssignmentsDate(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AssignmentsDate, error) {
	assignmentsDateObj := &AssignmentsDate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"lk\".\"assignments_dates\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, assignmentsDateObj)
	if err != nil {
		return nil, errors.Wrap(err, "models: unable to select from assignments_dates")
	}

	return assignmentsDateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssignmentsDate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assignments_dates provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(assignmentsDateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assignmentsDateInsertCacheMut.RLock()
	cache, cached := assignmentsDateInsertCache[key]
	assignmentsDateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assignmentsDateAllColumns,
			assignmentsDateColumnsWithDefault,
			assignmentsDateColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, assignmentsDateGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(assignmentsDateType, assignmentsDateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assignmentsDateType, assignmentsDateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"lk\".\"assignments_dates\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"lk\".\"assignments_dates\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into assignments_dates")
	}

	if !cached {
		assignmentsDateInsertCacheMut.Lock()
		assignmentsDateInsertCache[key] = cache
		assignmentsDateInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the AssignmentsDate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssignmentsDate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	assignmentsDateUpdateCacheMut.RLock()
	cache, cached := assignmentsDateUpdateCache[key]
	assignmentsDateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assignmentsDateAllColumns,
			assignmentsDatePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, assignmentsDateGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update assignments_dates, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"lk\".\"assignments_dates\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assignmentsDatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assignmentsDateType, assignmentsDateMapping, append(wl, assignmentsDatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update assignments_dates row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for assignments_dates")
	}

	if !cached {
		assignmentsDateUpdateCacheMut.Lock()
		assignmentsDateUpdateCache[key] = cache
		assignmentsDateUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q assignmentsDateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for assignments_dates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for assignments_dates")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssignmentsDateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignmentsDatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"lk\".\"assignments_dates\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assignmentsDatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in assignmentsDate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all assignmentsDate")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssignmentsDate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no assignments_dates provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(assignmentsDateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assignmentsDateUpsertCacheMut.RLock()
	cache, cached := assignmentsDateUpsertCache[key]
	assignmentsDateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			assignmentsDateAllColumns,
			assignmentsDateColumnsWithDefault,
			assignmentsDateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assignmentsDateAllColumns,
			assignmentsDatePrimaryKeyColumns,
		)

		insert = strmangle.SetComplement(insert, assignmentsDateGeneratedColumns)
		update = strmangle.SetComplement(update, assignmentsDateGeneratedColumns)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert assignments_dates, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assignmentsDatePrimaryKeyColumns))
			copy(conflict, assignmentsDatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"lk\".\"assignments_dates\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(assignmentsDateType, assignmentsDateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assignmentsDateType, assignmentsDateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert assignments_dates")
	}

	if !cached {
		assignmentsDateUpsertCacheMut.Lock()
		assignmentsDateUpsertCache[key] = cache
		assignmentsDateUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single AssignmentsDate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssignmentsDate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AssignmentsDate provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assignmentsDatePrimaryKeyMapping)
	sql := "DELETE FROM \"lk\".\"assignments_dates\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from assignments_dates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for assignments_dates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q assignmentsDateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no assignmentsDateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assignments_dates")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assignments_dates")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssignmentsDateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignmentsDatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"lk\".\"assignments_dates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignmentsDatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from assignmentsDate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for assignments_dates")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssignmentsDate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssignmentsDate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssignmentsDateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssignmentsDateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assignmentsDatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"lk\".\"assignments_dates\".* FROM \"lk\".\"assignments_dates\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assignmentsDatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AssignmentsDateSlice")
	}

	*o = slice

	return nil
}

// AssignmentsDateExists checks if the AssignmentsDate row exists.
func AssignmentsDateExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"lk\".\"assignments_dates\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if assignments_dates exists")
	}

	return exists, nil
}

// Exists checks if the AssignmentsDate row exists.
func (o *AssignmentsDate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AssignmentsDateExists(ctx, exec, o.ID)
}
